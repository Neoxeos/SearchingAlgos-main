
const canvas = document.querySelector('canvas');
const ctx = canvas.getContext('2d');
canvas.width = 1280;
canvas.height = 1300;



function generateChaos(sizeR, sizeC)
{
    let s = [];
    for (let i = 0; i < sizeR * sizeC; i++) {
        let rand = Math.random() * (100 - 1) + 1;
        if (rand <= 10) { s.push(1); }
        if (rand > 10 && rand <= 41) { s.push(1); }
        else { s.push(0); }
    }

    let text = s.join("");
    return text;
}

let environments = {
    "Default" : {
        rows : 30,
        cols : 30,
        map
    },

    "Chaos" : {
        rows: 50,
        cols: 50,
        map : generateChaos(50,50)
    },

    "ChaosBig" : {
        rows : 100,
        cols : 100,
        map : generateChaos(100,100)
    },

    "SmallMaze" : {
        rows : 64,
        cols : 64,
        map
    },

    "Caves" : {
        rows: 128,
        cols: 128,
        map: ""
    }
} 

// function addAnimSpeed(value) {
//     if (value !== "static")
//     {
//         console.log(value)
//         const labelExists = document.getElementsByTagName("animspeed");
//         if (labelExists !== null) { return; }
//         const newLabel = document.createElement("label", {is:"animspeed"});
//         console.log(newLabel)
//         newLabel.style.cssText = "position: absolute; left: 0px; top: 140px; width: 250px; height: 25px;";
//         newLabel.appendChild(document.createTextNode("Animation speed:"));

//         document.getElementById('controller').appendChild(newLabel);
//     }
//     else 
//     {
//         console.log(value)
//         const labelExists = document.getElementsByTagName("animspeed");
//         if (labelExists !== null) { return; }
//         else {labelExists.remove();}
//     }
//   }

function setMap(value = "Default")
{
    if (value === "Default") {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        myGame.grid.newMap(environments.Default);
        myGame.grid.draw();
    };
    if (value === "Chaos") {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        myGame.grid.newMap(environments.Chaos);
        myGame.grid.draw();
    };
    if (value === "ChaosBig") {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        myGame.grid.newMap(environments.ChaosBig);
        myGame.grid.draw();
    };
    if (value === "Caves") {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        myGame.grid.newMap(environments.Caves);
        myGame.grid.draw();
    };
    if (value === "SmallMaze") {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        myGame.grid.newMap(environments.SmallMaze);
        myGame.grid.draw();
    };
}

function setAlgo(value)
{
    if (value === "bfs")
    {
        myGame.algo = "bfs";
    }
    if (value === "dfs")
    {
        myGame.algo = "dfs";
    }
    if (value === "A")
    {
        myGame.algo = "A";
    }
}

function setAnim(value)
{
    if (value === "static") { myGame.anim = "static";}
    if (value === "continuous") { myGame.anim = "continuous";}
    if (value === "step") { myGame.anim = "step";}
}

function setTogglePath()
{
    myGame.togglePath = document.getElementById('expansion').checked;
}

class Grid 
{
    constructor(environment) 
    {
        this.nRows = environment.rows;
        this.nCols = environment.cols;
        this.cells = [];
        this.initalCells = [];
        this.sizeR = Math.floor(canvas.width / this.nRows);
        this.sizeC = Math.floor(canvas.height / this.nCols);

        for (let i = 0; i < this.nRows; i++)
        {
            for (let j = 0; j < this.nCols; j++)
            {
                let c = 'blue';
                if (environment.map[this.nRows*i+j] === "0") {c = 'blue';}
                else if (environment.map[this.nRows*i+j] === "1")  {c = 'green';}
                else if (environment.map[this.nRows*i+j] === "2")  {c = 'grey'}
                this.cells.push(
                    { x: j * this.sizeR,
                      y: i * this.sizeC,
                      color: c,
                      tag: '',
                     });

                this.initalCells.push(
                    { x: j * this.sizeR,
                      y: i * this.sizeC,
                      color: c,
                      tag: '',
                    });
            }
        }
    }

    newMap(environment) 
    {
        this.nRows = environment.rows;
        this.nCols = environment.cols;
        this.cells = [];
        this.initalCells = [];
        this.sizeR = Math.floor(canvas.width / this.nRows);
        this.sizeC = Math.floor(canvas.height / this.nCols);

        for (let i = 0; i < this.nRows; i++)
        {
            for (let j = 0; j < this.nCols; j++)
            {
                let c = 'blue';
                if (environment.map[this.nRows*i+j] === "0") {c = 'blue';}
                else if (environment.map[this.nRows*i+j] === "1")  {c = 'green';}
                else if (environment.map[this.nRows*i+j] === "2")  {c = 'grey'}
                this.cells.push(
                    { x: j * this.sizeR,
                      y: i * this.sizeC,
                      color: c,
                      tag: '',
                     });

                this.initalCells.push(
                    { x: j * this.sizeR,
                      y: i * this.sizeC,
                      color: c,
                      tag: '',
                    });
            }
        }
    }

    draw(togglePath = false, search = null, iter = false) 
    {
        if (iter && search !== null && togglePath)
        {
            // here we will add control for step and animated as needed as if (myGame.anim === "continuous" {} else {})
            setTimeout( () => {
            for (const node of search.queue) {
                let cell = this.cells.find((elem) =>
                    elem.x === node.x &&
                    elem.y === node.y,
                );
                if (cell !== null) { 
                    cell.color = 'yellow'; 
                    if (cell.tag === 'start')
                        {
                            cell.color = 'white';
                        }
                }
                ctx.fillStyle = cell.color;
                ctx.strokeStyle = "black";
                ctx.fillRect(cell.x, cell.y, this.sizeR, this.sizeC);
                ctx.strokeRect(cell.x, cell.y, this.sizeR, this.sizeC);
            }

            for (const cellv of search.visited) {
                let cell = this.cells.find((elem) =>
                    elem.x === cellv.x &&
                    elem.y === cellv.y,
                );
                if (cell != null) { 
                    cell.color = 'red'; 
                    if (cell.tag === 'start')
                    {
                        cell.color = 'white';
                    }
                }
                ctx.fillStyle = cell.color;
                ctx.strokeStyle = "black";
                ctx.fillRect(cell.x, cell.y, this.sizeR, this.sizeC);
                ctx.strokeRect(cell.x, cell.y, this.sizeR, this.sizeC);
            }

            if (!search.isRunning) {
                if ( search.path.length === 0 ) { return; }
                for (const cellv of search.path) {
                    let cell = this.cells.find((elem) =>
                        elem.x === cellv.x &&
                        elem.y === cellv.y,
                    );
                    cell.color = 'white';
                    ctx.fillStyle = 'white';
                    ctx.strokeStyle = "black";
                    ctx.fillRect(cell.x, cell.y, this.sizeR, this.sizeC);
                    ctx.strokeRect(cell.x, cell.y, this.sizeR, this.sizeC);
                }
                return;
            }

            search.iter_strategy(myGame.algo);
            setTimeout(this.draw(true, search, iter), 0);
        }, 0);
        }


        if (togglePath && search !== null && iter === false)
        {
            for (const node of search.queue) {
                let cell = this.cells.find((elem) =>
                    elem.x === node.x &&
                    elem.y === node.y,
                );
                if (cell !== null) { cell.color = 'yellow'; }
                ctx.fillStyle = cell.color;
                ctx.strokeStyle = "black";
                ctx.fillRect(cell.x, cell.y, this.sizeR, this.sizeC);
                ctx.strokeRect(cell.x, cell.y, this.sizeR, this.sizeC);
            }

            for (const cellv of search.visited) {
                let cell = this.cells.find((elem) =>
                    elem.x === cellv.x &&
                    elem.y === cellv.y,
                );
                if (cell != null) { cell.color = 'red'; }
                ctx.fillStyle = cell.color;
                ctx.strokeStyle = "black";
                ctx.fillRect(cell.x, cell.y, this.sizeR, this.sizeC);
                ctx.strokeRect(cell.x, cell.y, this.sizeR, this.sizeC);
            }
            for (const cellv of search.path){
                let cell = this.cells.find((elem) =>
                    elem.x === cellv.x &&
                    elem.y === cellv.y,
                );
                cell.color = 'white'; 
                ctx.fillStyle = 'white';
                ctx.strokeStyle = "black";
                ctx.fillRect(cell.x, cell.y, this.sizeR, this.sizeC);
                ctx.strokeRect(cell.x, cell.y, this.sizeR, this.sizeC);
            }
            return;
        }

        if (!togglePath && search !== null)
        {
            for (const cellv of search.path){
                let cell = this.cells.find((elem) =>
                    elem.x === cellv.x &&
                    elem.y === cellv.y,
                );
                cell.color = 'white'; 
                ctx.fillStyle = 'white';
                ctx.strokeStyle = "black";
                ctx.fillRect(cell.x, cell.y, this.sizeR, this.sizeC);
                ctx.strokeRect(cell.x, cell.y, this.sizeR, this.sizeC);
            }
            return;
        }

        if (search === null) 
        {
            for (const cell of this.cells) {
                if (cell.tag === 'start') {ctx.fillStyle = 'white';}
                else {ctx.fillStyle = cell.color;}
                ctx.strokeStyle = "black";
                ctx.fillRect(cell.x, cell.y, this.sizeR, this.sizeC);
                ctx.strokeRect(cell.x, cell.y, this.sizeR, this.sizeC);
            }
            return;
        }
    }

    resetBoard()
    {
        for (const cell of this.initalCells)
        {
            let cellv = this.cells.find((elem) => 
                cell.x === elem.x &&
                cell.y === elem.y
            )
            cellv.color = cell.color;
            cellv.tag = cell.tag;
        }
    }

    pathReady()
    {
        for (const cell of this.cells)
        {
            if (cell.tag === 'end')
            {
                this.resetBoard();
                return false;
            }
        }

        for (const cell of this.cells)
        {
            if (cell.tag === 'start')
            {
                return true;
            }
        }
        
        return false;
    }


    search(pattern, iter)
    {
        //find start and end cells
        let root = this.cells.find((elem) => elem.tag === 'start');
        let eNode = this.cells.find((elem) => elem.tag === 'end');

        if (pattern === 'bfs')
        {
            let bfs = new Search(root, eNode);
        
            if (iter !== "static") {
                bfs.iter_strategy('bfs'); 
                this.draw(myGame.togglePath, bfs, true);
            }
            else {
                bfs.strategy('bfs'); 
                this.draw(myGame.togglePath, bfs, false);
            }
        }

        if (pattern === 'dfs')
        {
            let dfs = new Search(root, eNode);

            if (iter !== "static") {
                dfs.iter_strategy('dfs'); 
                this.draw(myGame.togglePath, dfs, true);
            }
            else {
                dfs.strategy('dfs'); 
                this.draw(myGame.togglePath, dfs, false);
            }
        }

        if (pattern === 'A')
            {
                let bfs = new Search(root, eNode);
            
                if (iter !== "static") {
                    bfs.iter_strategy('A'); 
                    this.draw(myGame.togglePath, bfs, true);
                }
                else {
                    bfs.strategy('A'); 
                    this.draw(myGame.togglePath, bfs, false);
                }
            }
    }

    click() 
    {
        canvas.addEventListener('click', (event) =>
        {
            // remove canvas start
            const mouseX = event.clientX - canvas.getBoundingClientRect().left;
            const mouseY = event.clientY - canvas.getBoundingClientRect().top;

            let cell = this.cells.find(
                (elem) => 
                    mouseX >= elem.x &&
                    mouseX <= elem.x + this.sizeR &&
                    mouseY >= elem.y &&
                    mouseY <= elem.y + this.sizeC
            );

            let iter = myGame.anim; // for now here
            if (!this.pathReady()) 
            {
                cell.tag = cell.tag === 'start' ? '' : 'start';
            }
            else 
            {
                cell.tag = cell.tag === 'end' ? '' : 'end';
                ctx.fillStyle = "white";
                ctx.strokeStyle = "black";
                ctx.fillRect(cell.x, cell.y, this.sizeR, this.sizeC);
                ctx.strokeRect(cell.x, cell.y, this.sizeR, this.sizeC);
                this.search(myGame.algo, iter);
                return;
            }
            this.draw();
        })
    }
}

class Game 
{
    constructor(){};
    algo = "bfs"; //default
    anim = "static"; //default
    togglePath = true; //default
    grid;

    run() 
    {
        this.grid.draw();
        this.grid.click();
    }
}

let myGame = new Game();
myGame.grid = new Grid(environments.Default);
myGame.run();
